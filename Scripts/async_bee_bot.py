import logging
import schedule
from aiogram import Bot, Dispatcher, executor, types
from configure import config, path, group_id
from beelabs_keyboards import confirmation_start, class_names, semester_nums, tasks, get_laba_nums, variants, \
    way_releases, confirmation_end, web_site, conditions, wishes
from beelabs_values import order_id, get_order, flags
from autolocation import identify_location, coordinates, address

API_TOKEN = config.get('token')

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message):
    await message.answer('üêù *Bee Bot* - –ë–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –°–ï–í–ì–£\n'
                         'üõ† *–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫* - THEMAISON',
                         parse_mode='MARKDOWN')
    await message.delete()


@dp.message_handler(commands=['links'])
async def send_welcome(message: types.Message):
    links = types.InlineKeyboardMarkup(row_width=2)
    sevsu = types.InlineKeyboardButton('üåä SevSU', 'https://www.sevsu.ru/')
    moodle = types.InlineKeyboardButton('üñ• Moodle', 'https://do.sevsu.ru/')
    rocket = types.InlineKeyboardButton('üì¢ Rocket Chat', 'https://chat.is.sevsu.ru/')
    links.add(sevsu)
    links.add(moodle, rocket)

    await message.answer('üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏', reply_markup=links)
    await message.delete()


@dp.message_handler(commands=['sdoc'])
async def get_schedule_document(message: types.Message):
    if schedule.check_for_updates() or not schedule.have_legacy():
        schedule.download()
        await message.answer('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')

    iituts = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=4)
    is1 = types.KeyboardButton('üìó –ò–°1')
    is2 = types.KeyboardButton('üìï –ò–°2')
    is3 = types.KeyboardButton('üìò –ò–°3')
    pi1 = types.KeyboardButton('üìô –ü–ò1')
    iituts.add(is1, is2, is3, pi1)
    await message.delete()
    await message.answer('üêù –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à—É –≥—Ä—É–ø–ø—É', reply_markup=iituts)


@dp.message_handler(commands=['beelabs'])
async def get_beelabs(message: types.Message):
    await message.delete()
    await bot.send_message(message.from_user.id, 'üìù –ù–∞—á–∞—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞?', reply_markup=confirmation_start)


@dp.message_handler(content_types=['text'])
async def all_messages(message: types.Message):
    if flags.get('wish'):
        order_id['–ü–æ–∂–µ–ª–∞–Ω–∏–µ'] += f'{message.text} '
        await message.delete()

    elif flags.get('condition'):
        order_id['–£—Å–ª–æ–≤–∏–µ'] += f'{message.text} '
        await message.delete()

    elif message.text.startswith('!'):
        identify_location(message.text[1:])
        await bot.send_message(message.chat.id, address)
        await bot.send_location(message.chat.id, coordinates.get('latitude'), coordinates.get('longitude'),
                                horizontal_accuracy=1500)

    elif '–ø—á–µ–ª–∞' in message.text.lower():
        await message.answer('–î–æ–ª–±–∞—ë–±?')

    elif '–¥–∞–Ω—è' in message.text.lower() and message.chat.id == group_id.get('student_sevsu'):
        await bot.send_sticker(message.chat.id,
                               sticker='CAACAgIAAxkBAAEFcAABYugSXfOM5JcRtFHssaSjrJPqjvsAAoUaAALJNVFImYmO43hfnoUpBA',
                               reply_to_message_id=message.message_id)

    elif '–ò–°' in message.text or '–ü–ò' in message.text:
        group = int(message.text[-1]) if '–ò–°' in message.text else 4

        if schedule.create_new_schedule(group):
            await message.answer(
                f'üìö *–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n'
                f'–ì—Ä—É–ø–ø–∞: *{schedule.get_file_name(group)}*\n'
                f'–¢–µ–∫—É—â–∞—è –Ω–µ–¥–µ–ª—è: *{str(schedule.current_week())}*',
                reply_markup=types.ReplyKeyboardRemove())

            with open(path.get('schedules') + schedule.get_file_name(group) + '.xlsx', 'rb') as new_schedule:
                await bot.send_document(message.chat.id, new_schedule)
        else:
            await message.answer('‚ö† –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!', reply_markup=types.ReplyKeyboardRemove())


@dp.callback_query_handler()
async def beelabs_callback(callback: types.CallbackQuery):
    if callback.data == 'ready':
        await beelabs_message(callback, '–û—Ç–ª–∏—á–Ω–æ! –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞', 'üìí –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–µ–¥–º–µ—Ç–∞',
                              class_names)

    elif 'class_name' in callback.data:
        order_id['–ü—Ä–µ–¥–º–µ—Ç'] = callback.data[-1]
        await beelabs_message(callback, '–ü—Ä–µ–¥–º–µ—Ç –≤—ã–±—Ä–∞–Ω!', 'üéì –í—ã–±–µ—Ä–∏—Ç–µ —Å–µ–º–µ—Å—Ç—Ä', semester_nums)

    elif 'semester' in callback.data:
        order_id['–°–µ–º–µ—Å—Ç—Ä'] = callback.data[-1]
        await beelabs_message(callback, '–°–µ–º–µ—Å—Ç—Ä –≤—ã–±—Ä–∞–Ω!', 'üèó –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è', tasks)

    elif 'task' in callback.data:
        task_type = callback.data[-1]
        order_id['–ó–∞–¥–∞–Ω–∏–µ'] = task_type

        if task_type == '1':
            await beelabs_message(callback, '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ!', '‚öó –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç—ã',
                                  get_laba_nums(int(order_id.get('–°–µ–º–µ—Å—Ç—Ä'))))
        elif task_type in '234':
            flags['condition'] = True
            await beelabs_message(callback, '–ó–∞–¥–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–æ!', '‚úí –ù–∞–ø–∏—à–∏—Ç–µ —É—Å–ª–æ–≤–∏–µ', conditions)

    elif 'laba' in callback.data:
        order_id['–ù–æ–º–µ—Ä'] = callback.data[4:]
        await beelabs_message(callback, '–ù–æ–º–µ—Ä –≤—ã–±—Ä–∞–Ω!', '‚öó –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç', variants)

    elif 'variant' in callback.data:
        order_id['–í–∞—Ä–∏–∞–Ω—Ç'] = callback.data[7:]
        await beelabs_message(callback, '–í–∞—Ä–∏–∞–Ω—Ç –≤—ã–±—Ä–∞–Ω!', 'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏', way_releases)

    elif 'way_release' in callback.data:
        order_id['–£—Å–ª—É–≥–∞'] = callback.data[-1]
        flags['wish'] = True
        await beelabs_message(callback, '–£—Å–ª—É–≥–∞ –≤—ã–±—Ä–∞–Ω–∞!', 'üí° –ù–∞–ø–∏—à–∏—Ç–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)', wishes)

    elif 'condition' in callback.data:
        flags['condition'] = False
        await beelabs_message(callback, '–£—Å–ª–æ–≤–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', 'üì¶ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —É—Å–ª—É–≥–∏', way_releases)

    elif 'wish' in callback.data:
        flags['wish'] = False
        await beelabs_message(callback, '–ü–æ–∂–µ–ª–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!', f'üõí –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑\n{get_order()}',
                              confirmation_end)

    elif callback.data == 'confirm':
        await beelabs_message(callback, '–ü–æ—á—Ç–∏ –≥–æ—Ç–æ–≤–æ!', 'üì≤ –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç', web_site)

    elif callback.data == 'cancel':
        await callback.answer('–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω!')
        await callback.message.delete()


async def beelabs_message(callback, answer_text, message_text, markup):
    await callback.answer(answer_text)
    await callback.message.edit_text(message_text, parse_mode='MARKDOWN')
    await callback.message.edit_reply_markup(markup)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)

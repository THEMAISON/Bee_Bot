from aiogram import Bot, Dispatcher, executor, types
from autolocation import *
from schedule_receipt import prepare

API_TOKEN = config.get('token')

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)


# await message.answer('‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ')
# await message.answer('‚ö† –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!)


@dp.message_handler(commands=['start'])
async def send_welcome(message: types.Message) -> None:
    await message.answer('üêù *Bee Bot* - –ë–æ—Ç –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –°–ï–í–ì–£\nüõ† *–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫* - THEMAISON', parse_mode='MARKDOWN')
    await message.delete()


@dp.message_handler(commands=['links'])
async def send_welcome(message: types.Message) -> None:
    links = types.InlineKeyboardMarkup(row_width=2)
    sevsu = types.InlineKeyboardButton('üåä SEVSU', 'https://www.sevsu.ru/')
    moodle = types.InlineKeyboardButton('üñ• MOODLE', 'https://do.sevsu.ru/')
    rocket = types.InlineKeyboardButton('üì¢ ROCKET', 'https://chat.is.sevsu.ru/')
    links.add(sevsu)
    links.add(moodle, rocket)
    await message.answer('üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏', reply_markup=links)
    await message.delete()


@dp.message_handler(commands=['sch'])
async def get_main_schedule(message: types.Message) -> None:
    schedules = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=3)
    m = types.KeyboardButton('üç¨ –û–°–ù–û–í–ù–û–ï')
    p = types.KeyboardButton('üç´ –ü–£–õ')
    f = types.KeyboardButton('üçø –§–ò–ó–†–ê')
    schedules.add(m, p, f)
    await message.delete()
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–ø–∏—Å–∞–Ω–∏–µ...', reply_markup=schedules)


@dp.message_handler(commands=['beelabs'])
async def get_beelabs(message: types.Message) -> None:
    links = types.InlineKeyboardMarkup(row_width=1)
    bee_labs = types.InlineKeyboardButton('üêù BEELABS', 'https://vk.com')
    links.add(bee_labs)
    await message.answer('üîó –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Å—ã–ª–∫–∏', reply_markup=links)
    await message.delete()


@dp.message_handler(content_types=['text'])
async def message_answers(message: types.Message) -> None:
    if 'üç¨ –û–°–ù–û–í–ù–û–ï' in message.text:
        await message.delete()
        await message.answer(f'*üç¨ –û—Å–Ω–æ–≤–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ*\n', parse_mode='MARKDOWN')
        with open(prepare('main'), 'rb') as file:
            await bot.send_document(message.chat.id, file, reply_markup=types.ReplyKeyboardRemove())

    elif 'üç´ –ü–£–õ' in message.text:
        await message.delete()
        await message.answer(f'*üç´ –ü–£–õ*\n', parse_mode='MARKDOWN')
        with open(prepare('pul'), 'rb') as file:
            await bot.send_document(message.chat.id, file, reply_markup=types.ReplyKeyboardRemove())

    elif 'üçø –§–ò–ó–†–ê' in message.text:
        await message.delete()
        await message.answer('‚ö† –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ!', reply_markup=types.ReplyKeyboardRemove())

    elif message.text.startswith('!'):
        identify_location(message.text[1:])
        await bot.send_location(message.chat.id, coordinates['latitude'], coordinates['longitude'])

    elif message.text.lower() == '–ø—á–µ–ª–∞?':
        await message.answer('–î–æ–ª–±–∞—ë–±?')


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
